<template>
    <div class="p15">
        <el-tabs type="border-card">
            <el-tab-pane label="试卷详情">
                <div class="viewExam">
                    <h1>{{ paper.name }}</h1>
                    <h6>创建时间：{{ paper.createTime }}</h6>
                    <div v-for="(item,index) in questionList">
                        <dl v-if="item.questionType == 1">
                            <dt>{{ index + 1 }}.{{item.question}}<span class="pl15">单选题 {{ item.score }}分</span></dt>
                            <dd v-for="(item2,innerIndex) in JSON.parse(item.answers)">
                              {{ String.fromCharCode(64 + parseInt( innerIndex + 1 )) }} . {{ item2.value }}
                            </dd>
                        </dl>
                        <dl v-if="item.questionType == 2">
                            <dt>{{ index + 1 }}.{{item.question}}.<span class="pl15">多选题 {{ item.score }}分</span></dt>
                            <dd v-for="(item2,innerIndex) in JSON.parse(item.answers)">
                                {{ String.fromCharCode(64 + parseInt( innerIndex + 1 )) }} . {{ item2.value }}
                            </dd>
                        </dl>
                        <dl v-if="item.questionType == 3">
                            <dt>{{ index + 1 }}.{{item.question}} {{ item.score }}分</dt>
                            <dd>
                                A. 对   B.错
                            </dd>
                        </dl>
                        <dl v-if="item.questionType == 4">
                            <dt>{{ index + 1 }}.{{item.question}}
                                <span class="pl15" v-for="(item2,innerIndex) in JSON.parse(item.answers)">填空题
                                     {{ item2.score }}分
                                </span>
                            </dt>
                        </dl>
                        <dl v-if="item.questionType == 5">
                            <dt>{{ index + 1 }}.{{item.question}}<span class="pl15">主观题 {{ item.score }}分</span></dt>
                        </dl>
                    </div>
                    <div class="center"><el-button @click="close()">关闭</el-button></div>
                </div>
            </el-tab-pane>
            <el-tab-pane label="试卷评分详情" class="paperSet">
                <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" style="width:600px">
                    <el-table :data="tableData">
                        <el-table-column
                            prop="type"
                            label="题型">
                        </el-table-column>
                        <el-table-column
                            prop="total"
                            label="题数">
                        </el-table-column>
                        <el-table-column
                            prop="totalScore"
                            label="总分值">
                        </el-table-column>
                    </el-table>
                    <el-form-item align="right">
                        <span>卷面总计 {{ paper.score }} 分</span> 
                    </el-form-item>
                    <el-form-item align="right">
                        及格分：
                        <el-input style="width:80px" v-model="paper.passScore" disabled></el-input>
                    </el-form-item>
                    <el-form-item align="right" class="pt20">
                        <el-button  @click="close()">关闭</el-button>
                    </el-form-item>
                </el-form>
            </el-tab-pane>
            <el-tab-pane label="试卷设置">
                <el-form :model="paperSet" :rules="rules" ref="ruleForm" class="pt20" label-width="100px" style="width:600px">
                    <el-form-item label="答题时段" required>
                        <el-col :span="10">
                        <el-form-item prop="startTime">
                            <el-date-picker type="datetime" placeholder="选择日期" v-model="paperSet.startTime" style="width: 100%;" format='yyyy-MM-dd HH:mm:ss' value-format="yyyy-MM-dd HH:mm:ss"></el-date-picker>
                        </el-form-item>
                        </el-col>
                        <el-col class="line" :span="1">-</el-col>
                        <el-col :span="10">
                        <el-form-item prop="endTime">
                            <el-date-picker type="datetime" placeholder="选择日期" v-model="paperSet.endTime" style="width: 100%;" format='yyyy-MM-dd HH:mm:ss' value-format="yyyy-MM-dd HH:mm:ss"></el-date-picker>
                        </el-form-item>
                        </el-col>
                    </el-form-item>

                    <el-form-item label="答题时长" prop="duration">
                        <el-input style="width:80px;" v-model="paperSet.duration" placeholder="分钟"></el-input>
                    </el-form-item>
                    <el-form-item label="发放方式" prop="">
                        <img src="../../assets/ewm.png" alt="">
                    </el-form-item>
                    <el-tag type="danger">提示：把二维码图片通过邮件/微信/手机QQ群发放给学员，学员扫一扫二维码或输入口令进入考试页面</el-tag>
                    <div class="center pt20"><el-button @click="submitForm('ruleForm')">确定</el-button></div>
                </el-form>
            </el-tab-pane>
        </el-tabs>
        
  </div>
</template>
<style scoped>
    .Single-answer .el-form-item,.Multiple-answer .el-form-item{margin-bottom: 5px;}
    .Single-answer .el-input,.Multiple-answer .el-input{width:50%;margin-right:10px;}
    .Single-answer .el-input__inner,.Multiple-answer .el-input__inner{height: 30px}
    .paperSet .el-form-item{margin-bottom: 0;}
    .viewExam h1{text-align: center;line-height:70px;}
    .viewExam h6{text-align: center;}
    .viewExam dl{padding: 15px;}
    .viewExam dl dt{padding-bottom: 20px;}
    .viewExam dl dd{line-height: 22px;padding-left: 20px;}
</style>

<script>
  let qs = require('qs')
  let axios = require('axios')
  let format = require('date-fns/format')
  export default {
    data() {
      return {
        oid: this.$route.query.id,
        paper:{
            name: '',
            createTime: '',
            score: '',
            passScore: ''
        },
        paperSet:{
            id: '',
            startTime:'',
            endTime: '',
            duration: ''
        },
        questionList:[],
        pickerOptions: {
            shortcuts: [{
                text: '最近一周',
                onClick(picker) {
                    const end = new Date();
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
                    picker.$emit('pick', [start, end]);
                }
            }, {
                text: '最近一个月',
                onClick(picker) {
                    const end = new Date();
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                    picker.$emit('pick', [start, end]);
                }
            }, {
                text: '最近三个月',
                onClick(picker) {
                    const end = new Date();
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                    picker.$emit('pick', [start, end]);
                }
            }]
        },
        tableData: [{
            type: '单选题',
            total: 0,
            totalScore: 0
            }, {
            type: '多选题',
            total: 0,
            totalScore: 0
            }, {
            type: '填空题',
            total: 0,
            totalScore: 0
            }, {
            type: '判断题',
            total: 0,
            totalScore: 0
            }, {
            type: '简答题',
            total: 0,
            totalScore: 0
        }],
        ruleForm: {
          name: '',
          desc: ''
        },
        rules: {
          startTime: [
            { required: true, message: '请选择答题时段', trigger: 'blur' },
          ],
          endTime: [
            { required: true, message: '请选择答题时段', trigger: 'blur' },
          ],
          duration: [
            { required: true, message: '请输入答题时长', trigger: 'blur' },
          ]
        }
      }
    },
    mounted: function () {
      this.findById(this.oid)
    },
    methods: {
        findById (id) {
            let that = this
            this.axios.post(this.biz.serverUrl + '/paper/detail/' + id,this.biz.urlencodedConfig)
            .then(function (res) {
                if(res.status == 200){          
                    that.paper = res.data.paper
                    that.paperSet.id = res.data.paper.id
                    that.questionList = res.data.questionList
                    that.tableData[0].total = res.data.paper.sinSelection
                    that.tableData[1].total = res.data.paper.mulSelection
                    that.tableData[2].total = res.data.paper.judgement
                    that.tableData[3].total = res.data.paper.blankFill
                    that.tableData[4].total = res.data.paper.shorDiscuss
                }
            }).catch(function (res) {
                console.log(res)
            })
        },
        close() {
            this.$router.push({path: '/examList'})
        },
      submitForm(formName) {
        this.$refs[formName].validate((valid) => {
          if (valid) {
            alert('submit!');
            let that = this

            let param = qs.stringify(this.paperSet)

            console.log(param)

            this.axios.post(this.biz.serverUrl + '/paper/change/',param, this.biz.urlencodedConfig)
            .then(function (res) {
                if (res.data.code == 200) {
                    that.$message.success({message: '试卷设置成功！'})
                    that.$router.push({path: '/examList'})
                } else {
                    that.$message.error({message: '试卷设置失败！'})
                }
            }).catch(function (res) {
                console.log(res)
            })

          } else {
            console.log('error submit!!');
            return false;
          }
        });
      },
      resetForm(formName) {
        this.$refs[formName].resetFields();
      }
    }
  }
</script>