<template>
  <div id="main">
    <app-header></app-header>
    <el-row class="tac">
      <el-col :span="3" class="main-left">
        <app-menu></app-menu>
      </el-col>
      <el-col :span="21" class="main-right el-col-offset-3">
        <!-- 面包屑统一用UI库 -->
        <el-breadcrumb class="yp-crumbs-box" separator="/">
          <el-breadcrumb-item :to="{ path: 'examList' }">首页</el-breadcrumb-item>
          <el-breadcrumb-item>{{pageTitle}}</el-breadcrumb-item>
        </el-breadcrumb>
        <router-view></router-view>
      </el-col>
    </el-row>
    <!--<app-footer></app-footer>-->
    <el-dialog title="修改密码" :visible.sync="$store.state.dialogFormVisible">
      <el-form status-icon :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm" >
        <el-form-item label="原始密码" prop ="oldPassword">
          <el-input type="password" v-model="ruleForm.oldPassword" placeholder="请输入6-15位原始密码" auto-complete="off" style="width:100%"></el-input>
          <!-- <span>请输入6-15位原始密码</span> -->
        </el-form-item>
        <el-form-item label="新密码" prop ="password" required>
          <el-input type="password" v-model="ruleForm.password" placeholder="请输入新密码" auto-complete="off" style="width:100%"></el-input>
          <span style="display:block">由字母、下划线、数字组成6-15位字符,至少输入一个字母是大写</span>
        </el-form-item>
        <el-form-item label="确认密码" prop ="passwordRepet" required>
          <el-input type="password" v-model="ruleForm.passwordRepet" placeholder="确认密码" auto-complete="off" style="width:100%"></el-input>
          <!-- <span>（与新密码保存一致）</span> -->
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="$store.state.dialogFormVisible = false">取 消</el-button>
        <el-button type="primary" @click="submitForm('ruleForm')">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<script>

  import appHeader from '../components/header.vue'
  import appMenu from '../components/leftMenu.vue'
  import appFooter from '../components/footer.vue'

  import store from '@/store/index'

  let qs = require('qs')

  export default {
    store,
    name: 'main',
    components: {
      appHeader,
      appFooter,
      appMenu
    },
    data: function () {
      let validatePass = (rule, value, callback) => {
        // 大写字母
        let regUpper = /[A-Z]/ 
        let num = 0
        if (regUpper.test(value)) {
          num ++ 
        }

        if (value === '') {
          callback(new Error('请输入密码'));
        }else if( value.length < 6 || value.length > 15){
          callback(new Error('请输入6-15位密码'))
        }else if ( num < 1) {
          callback(new Error('至少输入一个大写字母'))
        }
        else {
          if (this.ruleForm.passwordRepet !== '') {
            this.$refs.ruleForm.validateField('passwordRepet');
          }
          callback();
        }
      };
      let validatePass2 = (rule, value, callback) => {
        if (value === '') {
          callback(new Error('请再次输入密码'));
        }
        else if (value !== this.ruleForm.password) {
          callback(new Error('两次输入密码不一致!'));
        } else {
          callback();
        }
      };
      return {
        pageTitle: this.$store.state.pageInf.title,
        // pageTitle:sessionStorage.title,
        // msg: 'LOGO',
        user: {userName: ''},
        // dilog:this.$store.state.dialogFormVisible,
        ruleForm:{
          oldPassword:'',
          password:'',
          passwordRepet:''
        },
        rules:{
          oldPassword: [
            { required: true, message: '请输入原始密码', trigger: 'blur' },
            { min: 6, max: 15, message: '请输入6-15位原始密码', trigger: 'blur' }
          ],
          password: [
            { validator: validatePass, trigger: 'blur' }
          ],
          passwordRepet: [
            { validator: validatePass2, trigger: 'blur' }
          ]
        }
      }
    },
    mounted: function () {
      // this.getLoginName()
      // this.getPubData();
      console.log( this.dilog )
      console.log('main init>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')

    },
    computed: {
      getPageTitle () {
        return this.$store.state.pageInf.title
      }
    },
    watch: {
      getPageTitle (val) {
        this.pageTitle = val
      }
    },
    methods: {
      submitForm(formName) {
        this.$refs[formName].validate((valid) => {
          if (valid) {

            let that = this
            let param = qs.stringify({
              'id':sessionStorage.getItem('userId'),
              // 'id':'11c5dda4c85b11e7937200163e329876',
              'oldPassword':this.ruleForm.oldPassword,
              'password':this.ruleForm.password
            })

            console.log(param)

            this.axios.post(this.biz.serverUrl + '/user/editPassword', param, this.biz.urlencodedConfig)
            .then(function(res){
              // console.log(res);
              if (res.data.code == '200') {
                that.$message.success('修改成功')
                that.$store.state.dialogFormVisible = false
              }else{
                that.$message.error('修改失败')
                that.$store.state.dialogFormVisible = false
              }
            }).catch(function (res) {
              console.log(res)
            })
          } else {
            console.log('error submit!!');
            return false;
          }
        });
      },
      resetForm(formName) {
        this.$refs[formName].resetFields();
      },
      setNavSelected: function (index) {//设置导航选中项
        console.log(index)
//        var nav = this.navList, menu = nav[index];
//        for (var i in nav) {
//          this.$set(nav[i], 'active', false);
//        }
//        this.$set(menu, 'active', true);
      },
      getPubData () {
        var that = this
        this.axios.get(this.biz.serverUrl + '/rest/pubData').then(function (res) {
          // $store.commit('setPubData',{title:to.meta.title});
          that.$store.commit('setPubData', res.data.element)
          console.log('setPubData')
          console.log(res.data.element)
        })
      },
      getLoginName () {
        var that = this
        this.axios.get(this.biz.serverUrl + '/rest/login')
        .then(function (res) {
          console.log(res)
          that.user.userName = res.data.element
        })
      },
      exitLogin: function () {//退出登录

        this.axios.get(this.biz.serverUrl + '/rest/logout')
        this.$store.commit('setUser', {})
        this.$router.push({path: '/login'})
        sessionStorage.removeItem('user')
      }

    }
  }
</script>

<style>
  .el-loading-mask {
    position: fixed !important;
  }

  .el-submenu .el-menu-item {
    /* min-width: 20px; */
  }

  div#yp-user-box {
    display: block;
    height: 46px;
    line-height: 46px;
    float: right;
    margin-right: 20px;
  }

  #yp-exit-btn {
    width: 22px;
    height: 19px;
    border: none;
    cursor: pointer;
    display: inline-block;
    background: url(../assets/yp-ssp-icon.png) no-repeat;
    margin-left: 10px;
    vertical-align: middle;
  }

  ul#yp-nav {
    height: 46px;
    display: inline-block;
  }

  ul#yp-nav li {
    float: left;
    height: 46px;
    padding: 0 0 0 20px;
    margin: 0 20px;
    line-height: 46px;
    position: relative;
    overflow: hidden;
    cursor: pointer;
  }

  i.yp-nav-icon {
    width: 20px;
    height: 16px;
    display: inline-block;
    background: url(../assets/yp-ssp-icon.png) no-repeat;
    position: absolute;
    top: 15px;
    left: 0;
  }

  img.yp-nav-active {
    width: 100%;
    height: 3px;
    position: absolute;
    left: 0;
    bottom: 0;
    display: none;
  }

  #yp-nav li:hover img.yp-nav-active {
    display: block;
  }

  div.yp-crumbs-box {
    height: 46px;
    line-height: 46px;
    padding-left: 20px;
    border-bottom: 1px solid #E2E2E2;
  }

  .yt-list {
    margin: 0 1rem 0 1rem
  }

  .yt-list .table-div .table-add {
    margin-bottom: 1rem
  }

  .yt-list .el-pagination {
    text-align: center
  }

  .yt-list .el-form {
    margin: 1rem 0 1rem 0
  }

  .yt-list .el-pagination {
    margin: 1rem 0 1rem 0
  }

  .yt-list .yp_tip_button {
    background: #eafaf0 !important;
    color: #2ecd71 !important;
    border: 1px solid #2ecd71 !important;
    /*box-shadow:0 0 5px #2DCC70;*/
    margin-bottom: 0px;
    transition: all 0.5s !important;
    font-size: 12px !important;
  }

  .yt-list .yp_tip_button:hover {
    background: #2DCC70 !important;
    color: #fff !important;
    /*border:none !important;*/
    box-shadow: 0 0 5px #2DCC70 !important;
    margin-bottom: 0px;
  }

  .yt-add {
    width: 30%;
    margin: 1rem 1rem 0 1rem
  }

  .yt-edit {
    width: 30%;
    margin: 1rem 1rem 0 1rem
  }
  
</style>

<style scoped="scoped">
  .main-left {
    background-color: #e6e6e6;
    position: fixed;
    float: left;
    top: 65px;
    bottom: 0;
    overflow: auto;
  }

  #main {
    padding-top: 65px;
  }
</style>
