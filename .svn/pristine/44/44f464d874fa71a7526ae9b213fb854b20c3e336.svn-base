<template>
    <div>        
        <div id="tree">
            <el-tree :data="data" :props="defaultProps" @node-click="handleNodeClick" highlight-current default-expand-all show-checkbox node-key="id" ref="tree"></el-tree>         
        </div>
            <el-row class="pr10">
                <el-col :span="24" align="center">
                    <el-button type="primary" size="medium" @click="addPot()">确定</el-button>
                    <el-button type="primary" size="medium" @click="goback()">返回</el-button>
                </el-col>
            </el-row>
        </div>
    </div>
</template>    
<style scoped>
.signinPeople {
  width: 100%;
  display: inline-block;
  border: none;
  background: none;
}
.el-input {
  width: 200px;
}
/* .el-form--inline .el-form-item{ margin-bottom:10px;} */
.popUp,
.deck {
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  position: fixed;
  left: 0;
  top: 0;
  z-index: 2;
  display: none;
}

.popUpcontent {
  width: 700px;
  background: #fff;
  height: auto;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 0;
  right: 0;
  margin: 0 auto;
  padding: 10px;
}
.contentbox {
  width: 100%;
}
.contentbox h2 {
  font-size: 16px;
  border-bottom: 1px solid #ececec;
  padding-bottom: 5px;
}
.content {
  overflow: hidden;
}
.content li {
  width: 100%;
  box-sizing: border-box;
  line-height: 40px;
}
.content li:after {
  display: table;
  content: "";
  clear: both;
}
.content label {
  width: 15%;
  float: left;
  text-align: right;
}
.content span {
  width: 85%;
  float: left;
  text-align: left;
  display: inline-block;
  padding: 0 10px;
  box-sizing: border-box;
}
.close {
  border: none;
  position: absolute;
  right: 0;
  top: 0;
  font-size: 24px;
  background: none;
  z-index: 999;
}
.el-table .el-button + .el-button,
.el-button + .el-button {
  margin-left: 0;
}
</style>
<script>
import $ from "jquery";
var qs = require("qs");
var axios = require("axios");
export default {
  data() {
    return {
      highlight: true,
      all: true,
      show: false,
      showadd: false,
      showdele: false,
      shows: false,
      data: [
        {
          label: "一级 1",
          children: [
            {
              label: "二级 1-1",
              children: [
                {
                  name: "三级 1-1-1"
                }
              ]
            }
          ]
        },
        {
          label: "一级 2",
          children: [
            {
              label: "二级 2-1",
              children: [
                {
                  label: "三级 2-1-1"
                }
              ]
            },
            {
              label: "二级 2-2",
              children: [
                {
                  label: "三级 2-2-1"
                }
              ]
            }
          ]
        },
        {
          label: "一级 3",
          children: [
            {
              label: "二级 3-1",
              children: [
                {
                  label: "三级 3-1-1"
                }
              ]
            },
            {
              label: "二级 3-2",
              children: [
                {
                  label: "三级 3-2-1"
                }
              ]
            }
          ]
        }
      ],
      defaultProps: {
        children: "children",
        label: "label"
      }
    };
  },
  mounted() {
    this.list();
  },
  methods: {
    addPot: function() {
      this.$router.push({ path: "/menuList" });
    },
    editInfo: function(id) {
      this.$router.push({ path: "/menuEdit", query: { id: id } });
    },
    handleNodeClick(data) {
      // console.log(data.hasOwnProperty('children'));
      if (data.hasOwnProperty("children")) {
        this.showadd = true;
        this.showdele = true;
        this.show = false;
      } else {
        this.show = true;
        this.showadd = false;
        this.showdele = true;
        this.shows = true;
      }
    },
    getCheckedNodes() {
      console.log(this.$refs.tree.getCheckedNodes());
    },
    getCheckedKeys() {
      console.log(this.$refs.tree.getCheckedKeys());
    },
    setCheckedNodes() {
      this.$refs.tree.setCheckedNodes([
        {
          id: 5,
          label: "二级 2-1"
        },
        {
          id: 9,
          label: "三级 1-1-1"
        }
      ]);
    },
    setCheckedKeys() {
      this.$refs.tree.setCheckedKeys([3]);
    },
    resetChecked() {
      this.$refs.tree.setCheckedKeys([]);
    },
    list() {
      let that = this;
      this.axios
        .post(this.biz.serverUrl + "resource/getall", {
          headers: { "Content-Type": "application/x-www-form-urlencoded" }
        })
        .then(function(res) {
          console.log(res);
          if (res.data.code == 200) {
            that.resourceList = res.data.resourceList;
            // that.tableData=res.data.datas
            // console.log(that.tableData)
            // // that.pageSize=res.data.fsp.pageSize      //每页的条数
            // that.pageCount=res.data.fsp.pageCount      //页总数
            // that.currentPage=res.data.fsp.page        //当前页
            // that.tableData.forEach(function(v,i){
            //     let time=new Date(that.tableData[i].createTime)
            //     let time1=new Date(that.tableData[i].updateTime)
            //     // console.log(that.getTimer(time))
            //     that.tableData[i].createTime=that.getTimer(time)
            //     that.tableData[i].updateTime=that.getTimer(time1)
            // })
          }
        })
        .catch(function(res) {
          console.log(res);
        });
    }
  }
};
</script>